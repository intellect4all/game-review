basePath: /
definitions:
  authentication.ForgetAndResetPasswordRequest:
    properties:
      confirmPassword:
        minLength: 8
        type: string
      email:
        type: string
      otpCode:
        type: string
      password:
        minLength: 8
        type: string
      tokenID:
        type: string
    required:
    - confirmPassword
    - email
    - otpCode
    - password
    - tokenID
    type: object
  authentication.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  authentication.LoginSuccessResponse:
    properties:
      jwt:
        type: string
      user:
        $ref: '#/definitions/authentication.UserDetail'
    type: object
  authentication.OTPCreationSuccessResponse:
    properties:
      email:
        type: string
      otpId:
        type: string
    type: object
  authentication.SignUpRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        enum:
        - user
        - moderator
        type: string
      username:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - phone
    - role
    - username
    type: object
  authentication.UserDetail:
    properties:
      firstName:
        type: string
      isVerified:
        type: boolean
      lastName:
        type: string
      phone:
        type: string
      role:
        enum:
        - user
        - admin
        - moderator
        type: string
      username:
        type: string
    required:
    - firstName
    - isVerified
    - lastName
    - role
    - username
    type: object
  authentication.VerifyAccountRequest:
    properties:
      email:
        type: string
      otpCode:
        type: string
      tokenID:
        type: string
    required:
    - email
    - otpCode
    - tokenID
    type: object
  games.AddGameRequest:
    properties:
      developer:
        type: string
      genres:
        items:
          $ref: '#/definitions/games.EmbeddedGameGenre'
        type: array
      publisher:
        type: string
      releaseDate:
        type: string
      summary:
        type: string
      title:
        type: string
    required:
    - developer
    - genres
    - publisher
    - releaseDate
    - summary
    - title
    type: object
  games.AddGameRes:
    type: object
  games.AddGenreRequest:
    properties:
      desc:
        type: string
      title:
        type: string
    required:
    - desc
    - title
    type: object
  games.AddGenreRes:
    properties:
      slug:
        type: string
    type: object
  games.EditGenreRequest:
    properties:
      desc:
        type: string
      slug:
        type: string
      title:
        type: string
    type: object
  games.EmbeddedGameGenre:
    properties:
      slug:
        type: string
      title:
        type: string
    type: object
  games.Game:
    properties:
      createdAt:
        type: string
      developer:
        type: string
      genres:
        items:
          $ref: '#/definitions/games.EmbeddedGameGenre'
        type: array
      id:
        type: string
      isDeleted:
        type: boolean
      publisher:
        type: string
      rating:
        $ref: '#/definitions/games.RatingStats'
      releaseDate:
        type: string
      summary:
        type: string
      title:
        type: string
    type: object
  games.GameGenre:
    properties:
      createdAt:
        type: string
      desc:
        type: string
      isDeleted:
        type: boolean
      slug:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    required:
    - desc
    - slug
    - title
    type: object
  games.PaginatedResponse-games_Game:
    properties:
      currentPage:
        type: integer
      data:
        items:
          $ref: '#/definitions/games.Game'
        type: array
      hasMore:
        type: boolean
      itemsPerPage:
        type: integer
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  games.PaginatedResponse-games_GameGenre:
    properties:
      currentPage:
        type: integer
      data:
        items:
          $ref: '#/definitions/games.GameGenre'
        type: array
      hasMore:
        type: boolean
      itemsPerPage:
        type: integer
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  games.RatingStats:
    properties:
      average:
        type: number
      totalRatings:
        type: integer
    type: object
  games.UpdateGameRequest:
    properties:
      developer:
        type: string
      genres:
        items:
          $ref: '#/definitions/games.EmbeddedGameGenre'
        type: array
      publisher:
        type: string
      releaseDate:
        type: string
      summary:
        type: string
      title:
        type: string
    type: object
  main.JSONErrorRes:
    properties:
      error: {}
      message:
        type: string
    type: object
  main.JSONResult:
    properties:
      data: {}
      message:
        type: string
    type: object
info:
  contact:
    email: autolarry55@gmail.com
    name: API Support
    url: http://www.swagger.io/support
  description: This is an Api AuthService for Cool Game Review Api.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Game Review API
  version: "1.0"
paths:
  /api/v1/forgot-password/init/{email}:
    post:
      consumes:
      - application/json
      description: |-
        An otp code is sent to the email if the user account existed.
        An otp ID is returned, which must submitted alongside the otpCode sent to the mail to the Forgot password reset endpoint.
      operationId: ForgotPasswordInit
      parameters:
      - description: Email address
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/authentication.OTPCreationSuccessResponse'
              type: object
        "404":
          description: No Account Found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      summary: Forget password endpoint
      tags:
      - Authentication
  /api/v1/forgot-password/resend/{email}:
    post:
      consumes:
      - application/json
      description: |-
        An otp code is sent to the email if the user account existed.
        An otp ID is returned, which must submitted alongside the otpCode sent to the mail to the Forgot password reset endpoint.
      operationId: ResendForgetPasswordCode
      parameters:
      - description: Email address
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/authentication.OTPCreationSuccessResponse'
              type: object
        "404":
          description: No Account Found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      summary: Resend OTP code for Forget password
      tags:
      - Authentication
  /api/v1/forgot-password/reset:
    post:
      consumes:
      - application/json
      description: The Endpoint resets the user password using the otp code sent to
        the user's email
      operationId: ResetPassword
      parameters:
      - description: OtpID data
        in: body
        name: ForgetAndResetPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/authentication.ForgetAndResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "404":
          description: No Account Found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "409":
          description: User already verified
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      summary: Complete Forget password reset
      tags:
      - Authentication
  /api/v1/games:
    get:
      consumes:
      - application/json
      description: Gets all games, limits and offset can be used to paginate the results
      operationId: getGames
      parameters:
      - in: query
        name: developer
        type: string
      - in: query
        name: genre
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: publisher
        type: string
      - in: query
        name: released_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/games.PaginatedResponse-games_Game'
              type: object
      security:
      - BearerAuth: []
      summary: Gets all games
      tags:
      - games
  /api/v1/games/{id}:
    delete:
      description: the id is required
      operationId: deleteGame
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Game not found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      security:
      - BearerAuth: []
      summary: Delete a game
      tags:
      - games
    get:
      description: the slug is required
      operationId: getGame
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/games.Game'
              type: object
      security:
      - BearerAuth: []
      summary: Gets a game
      tags:
      - games
    put:
      consumes:
      - application/json
      description: the id is required
      operationId: updateGame
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: updateGame request
        in: body
        name: updateGame
        required: true
        schema:
          $ref: '#/definitions/games.UpdateGameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Game not found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      security:
      - BearerAuth: []
      summary: Updates a game
      tags:
      - games
  /api/v1/games/add:
    post:
      consumes:
      - application/json
      description: Adds a new game genre
      operationId: addGame
      parameters:
      - description: addGame request
        in: body
        name: addGenre
        required: true
        schema:
          $ref: '#/definitions/games.AddGameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/games.AddGameRes'
              type: object
        "409":
          description: Game already exists
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      security:
      - BearerAuth: []
      summary: Adds a new game
      tags:
      - games
  /api/v1/games/genres:
    get:
      consumes:
      - application/json
      description: Gets all game genres, limits and offset can be used to paginate
        the results
      operationId: getGenres
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/games.PaginatedResponse-games_GameGenre'
              type: object
      security:
      - BearerAuth: []
      summary: Gets all game genres
      tags:
      - games
  /api/v1/games/genres/{slug}:
    delete:
      description: the slug is required
      operationId: deleteGenre
      parameters:
      - description: slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Genre not found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      security:
      - BearerAuth: []
      summary: Delete a game genre
      tags:
      - games
    get:
      description: the slug is required
      operationId: getGenre
      parameters:
      - description: slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/games.GameGenre'
              type: object
      security:
      - BearerAuth: []
      summary: Gets a game genre
      tags:
      - games
  /api/v1/games/genres/add:
    post:
      consumes:
      - application/json
      description: Adds a new game genre, the slug is generated from the title, and
        it must be unique
      operationId: addGenre
      parameters:
      - description: addGenre request
        in: body
        name: addGenre
        required: true
        schema:
          $ref: '#/definitions/games.AddGenreRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/games.AddGenreRes'
              type: object
        "409":
          description: Genre with the same slug already exists
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      security:
      - BearerAuth: []
      summary: Adds a new game genre
      tags:
      - games
  /api/v1/games/genres/update:
    put:
      consumes:
      - application/json
      description: Updates a game genre, the slug is required
      operationId: updateGenre
      parameters:
      - description: updateGenre request
        in: body
        name: updateGenre
        required: true
        schema:
          $ref: '#/definitions/games.EditGenreRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Genre not found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      security:
      - BearerAuth: []
      summary: Updates a game genre
      tags:
      - games
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Returns a signed JSON Web Token that can be used to talk to secured
        endpoints
      operationId: login
      parameters:
      - description: login request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/authentication.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/authentication.LoginSuccessResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "426":
          description: Account is inactive
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      summary: Login endpoint for all users
      tags:
      - Authentication
  /api/v1/ping:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      operationId: ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - ping
  /api/v1/signup:
    post:
      consumes:
      - application/json
      description: Creates a new User/Moderator on the system. The Moderator will
        need to be manually activated by an existing admin
      operationId: signup
      parameters:
      - description: signup request
        in: body
        name: signUpRequest
        required: true
        schema:
          $ref: '#/definitions/authentication.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      summary: Signup endpoint for all users and moderators
      tags:
      - Onboarding
  /api/v1/verify-account/init/{email}:
    post:
      consumes:
      - application/json
      description: |-
        An otp code is sent to the email if the user account existed.
        An otp ID is returned, which must submitted alongside the otpCode sent to the mail to the VerifyAccount endpoint.
      operationId: initVerifyAccount
      parameters:
      - description: Email address
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/authentication.OTPCreationSuccessResponse'
              type: object
        "404":
          description: No Account Found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "409":
          description: User already verified
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      summary: Initiate user email verification
      tags:
      - Onboarding
  /api/v1/verify-account/resend/{email}:
    post:
      consumes:
      - application/json
      description: |-
        An otp code is sent to the email if the user account existed.
        An otp ID is returned, which must submitted alongside the otpCode sent to the mail to the VerifyAccount endpoint.
      operationId: ResendVerificationCode
      parameters:
      - description: Email address
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/authentication.OTPCreationSuccessResponse'
              type: object
        "404":
          description: No Account Found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "409":
          description: User already verified
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      summary: Resend OTP code for account verification
      tags:
      - Onboarding
  /api/v1/verify-account/verify:
    post:
      consumes:
      - application/json
      description: The Endpoint verifies the user account using the otp code sent
        to the user's email
      operationId: VerifyAccount
      parameters:
      - description: OtpID data
        in: body
        name: verifyAccountRequest
        required: true
        schema:
          $ref: '#/definitions/authentication.VerifyAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/main.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "404":
          description: No Account Found
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "409":
          description: User already verified
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.JSONErrorRes'
      summary: Complete account verification
      tags:
      - Onboarding
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
